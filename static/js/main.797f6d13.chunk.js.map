{"version":3,"sources":["Games/dice.js","Games/hashdice.js","App.js","serviceWorker.js","index.js"],"names":["crypto","require","roll","data","hash","createHash","update","digest","console","log","index","lucky","compute","parseInt","substring","Math","pow","toString","split","slice","getRoll","substr","App","state","ServerSeed","ClientSeed","Nonce","result","showResult","classicDice","hashDice","this","className","Media","width","height","src","alt","Body","Row","Button","variant","onClick","setState","Form","Group","controlId","Label","Control","type","placeholder","value","onChange","e","target","Text","Alert","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.797f6d13.chunk.js","sourcesContent":["// crypto lib for hash function\r\nconst crypto = require('crypto');\r\n\r\nexport function roll(data) {\r\n    // create hash using server seed as key and client seed as message\r\n    const hash = crypto.createHash('sha256').update(data).digest('hex');\r\n    console.log('result hash', hash);\r\n\r\n\r\n    let index = 0;\r\n    let lucky = '';\r\n    let compute = 0;\r\n    while (index < 4) {\r\n        lucky = parseInt(hash.substring(index * 2, index * 2 + 2), 16);\r\n        lucky = lucky / (Math.pow(256, index + 1));\r\n        compute = compute + lucky;\r\n        index++;\r\n    }\r\n\r\n    compute = compute * 10001 / 100;\r\n    compute = compute.toString();\r\n    compute = compute.split('.');\r\n    compute[1] = compute[1].slice(0, 2);\r\n    compute = compute[0] + '.' + compute[1];\r\n    console.log(\"LUCKY : \", compute);\r\n    return compute;\r\n};\r\n","// crypto lib for hash function\r\nconst crypto = require('crypto');\r\n\r\nexport function getRoll(data) {\r\n\r\n    // create hash using server seed as key and client seed as message\r\n    const hash = crypto.createHash('sha512').update(data).digest('hex');\r\n    console.log('result hash', hash);\r\n\r\n    var index = 0;\r\n\r\n    do {\r\n\r\n        var lucky = parseInt(hash.substr(index, 5), 16);\r\n\r\n        index += 5;\r\n\r\n    } while (lucky >= 1000000);\r\n\r\n    return lucky % 100000;\r\n\r\n}\r\n","import React from 'react';\nimport { Form, Media, Button, Alert, Row } from 'react-bootstrap';\nimport { roll } from './Games/dice.js';\nimport { getRoll } from './Games/hashdice.js';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      ServerSeed: '',\n      ClientSeed: '',\n      Nonce: 0,\n      result: 0,\n      showResult: false,\n      classicDice: true,\n      hashDice: false\n    }\n  }\n\n  render() {\n    const { ServerSeed, ClientSeed, Nonce, result, showResult, classicDice, hashDice } = this.state;\n    return (\n      <div className=\"container pt-5\">\n        <Media>\n          <img\n            width={128}\n            height={128}\n            className=\"mr-3\"\n            src=\"logo192.png\"\n            alt=\"Generic placeholder\"\n          />\n          <Media.Body>\n            <br /><br />\n            <h5>Provably Fair Verify Tool (BC.GAME)</h5>\n          </Media.Body>\n        </Media>\n        <Row className=\"mt-5 ml-3\">\n          <Button variant={classicDice ? 'primary' : 'light'} onClick={() => {\n            this.setState({ classicDice: true, hashDice: false, showResult: false })\n          }} >\n            Classic Dice\n            </Button>\n          <Button variant={hashDice ? 'primary' : 'light'} className=\"ml-2\" onClick={() => {\n            this.setState({ hashDice: true, classicDice: false, showResult: false })\n          }} >\n            Hash Dice\n            </Button>\n        </Row>\n        <Form className=\"mt-5 col-md-5\">\n          <Form.Group controlId=\"formBasicServerSeed\">\n            <Form.Label>Server Seed</Form.Label>\n            <Form.Control type=\"ServerSeed\" placeholder=\"Enter Server Seed\" value={ServerSeed} onChange={(e) => {\n              this.setState({ ServerSeed: e.target.value })\n            }} />\n            <Form.Text className=\"text-muted\">\n              We'll never share your Server Seed with anyone else.\n          </Form.Text>\n          </Form.Group>\n\n          <Form.Group controlId=\"formBasicClientSeed\">\n            <Form.Label>Client Seed</Form.Label>\n            <Form.Control type=\"ClientSeed\" placeholder=\"Enter Client Seed\" value={ClientSeed} onChange={(e) => {\n              this.setState({ ClientSeed: e.target.value })\n            }} />\n            <Form.Text className=\"text-muted\">\n              We'll never share your Client Seed with anyone else.\n          </Form.Text>\n          </Form.Group>\n\n          <Form.Group controlId=\"formBasicNonce\">\n            <Form.Label>Nonce</Form.Label>\n            <Form.Control type=\"number\" placeholder=\"Nonce\" value={Nonce} onChange={(e) => {\n              this.setState({ Nonce: e.target.value })\n            }} />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"button\" onClick={() => {\n            this.setState({ result: classicDice ? roll(`${ServerSeed}:${ClientSeed}:${Nonce}`) : hashDice ? getRoll(`${ServerSeed}${ClientSeed}${Nonce}`) : 0, showResult: true })\n          }}>\n            Submit\n        </Button>\n          {showResult && <Alert className=\"mt-3\" variant=\"success\">\n            The result is : {result} !\n        </Alert>\n          }\n        </Form>\n\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}