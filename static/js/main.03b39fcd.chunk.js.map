{"version":3,"sources":["Games/dice.js","Games/hashdice.js","Games/plinko.js","Games/limbo.js","Games/hilo.js","App.js","serviceWorker.js","index.js"],"names":["crypto","require","roll","data","hash","createHash","update","digest","console","log","index","lucky","compute","parseInt","substring","Math","pow","toString","split","slice","getRoll","substr","bytes_to_number","bytes","total","i","handlePlinko","server_seed","client_seed","nonce","nums","totals","length","push","bytes_to_num_array","result","map","value","direction","floor","handleLimbo","nBits","X","max","handleHilo","round","entries","cards","num","nums_to_card_array","App","handleSubmit","event","state","ServerSeed","ClientSeed","Nonce","classicDice","hashDice","plinko","limbo","hilo","currentTarget","checkValidity","preventDefault","stopPropagation","setState","validated","showResult","this","className","Media","width","height","src","alt","Body","Row","Button","variant","onClick","Form","noValidate","Group","controlId","Label","Control","type","required","placeholder","onChange","e","target","Feedback","Alert","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03b39fcd.chunk.js","sourcesContent":["// crypto lib for hash function\r\nconst crypto = require('crypto');\r\n\r\nexport function roll(data) {\r\n    // create hash using server seed as key and client seed as message\r\n    const hash = crypto.createHash('sha256').update(data).digest('hex');\r\n    console.log('result hash', hash);\r\n\r\n\r\n    let index = 0;\r\n    let lucky = '';\r\n    let compute = 0;\r\n    while (index < 4) {\r\n        lucky = parseInt(hash.substring(index * 2, index * 2 + 2), 16);\r\n        lucky = lucky / (Math.pow(256, index + 1));\r\n        compute = compute + lucky;\r\n        index++;\r\n    }\r\n\r\n    compute = compute * 10001 / 100;\r\n    compute = compute.toString();\r\n    compute = compute.split('.');\r\n    compute[1] = compute[1].slice(0, 2);\r\n    compute = compute[0] + '.' + compute[1];\r\n    return compute;\r\n};\r\n","// crypto lib for hash function\r\nconst crypto = require('crypto');\r\n\r\nexport function getRoll(data) {\r\n\r\n    // create hash using server seed as key and client seed as message\r\n    const hash = crypto.createHash('sha512').update(data).digest('hex');\r\n    console.log('result hash', hash);\r\n\r\n    var index = 0;\r\n\r\n    do {\r\n\r\n        var lucky = parseInt(hash.substr(index, 5), 16);\r\n\r\n        index += 5;\r\n\r\n    } while (lucky >= 1000000);\r\n\r\n    return lucky % 100000;\r\n\r\n}\r\n","// crypto lib for hash function\r\nconst crypto = require('crypto');\r\n\r\nfunction bytes(data) {\r\n    let result = '';\r\n    result = crypto.createHash('sha512').update(data).digest('hex');\r\n    console.log('result hash', result);\r\n    return result;\r\n};\r\n\r\nfunction bytes_to_num_array(bytes) {\r\n    let totals = [];\r\n    for (let i = 0; i * 8 < bytes.length; i++) {\r\n        totals.push(bytes_to_number(bytes.substr(i * 8), 8));\r\n    }\r\n    return totals;\r\n};\r\n\r\n/**\r\n * Returns a number in the range [0, 1)\r\n * @param {string} bytes - The 8 character (4 byte) hex string to convert to a number\r\n * @returns {number} A number in the range [0, 1)\r\n */\r\nfunction bytes_to_number(bytes) {\r\n    let total = 0;\r\n    for (let i = 0; i < 4; i++) {\r\n        total += parseInt(bytes.substr(i * 2, 2), 16) / Math.pow(256, i + 1);\r\n    }\r\n    return total;\r\n};\r\n\r\nexport function handlePlinko(server_seed, client_seed, nonce) {\r\n    let nums = [];\r\n\r\n    bytes_to_num_array(bytes(`${server_seed}${client_seed}${nonce}`)).map((value, index) => {\r\n        let direction = Math.floor(value * 2) ? 'right' : 'left';\r\n        return nums.push(direction + ', ');\r\n    })\r\n    console.log(\"Plinko -- \", nums);\r\n    return nums;\r\n}\r\n\r\n\r\n","\r\nconst crypto = require('crypto');\r\n\r\nexport const handleLimbo = function (data) {\r\n    // create HMAC using server hash as key and client hash as message\r\n    let hash = crypto.createHash('sha256').update(data).digest('hex');\r\n    console.log('result hash', hash);\r\n\r\n    const nBits = 52;\r\n    hash = hash.slice(0, nBits / 4);\r\n    const r = parseInt(hash, 16);\r\n    let X = r / Math.pow(2, nBits);\r\n    X = 99 / (1 - X);\r\n    const result = Math.floor(X);\r\n    return hash ? Math.max(1, result / 100) : '';\r\n}\r\n\r\n\r\n","// crypto lib for hash function\r\nconst crypto = require('crypto');\r\n\r\nfunction bytes(data) {\r\n    let result = '';\r\n    result = crypto.createHash('sha256').update(data).digest('hex');\r\n    console.log('result hash', result);\r\n    return result;\r\n};\r\n\r\nfunction bytes_to_num_array(bytes) {\r\n    let totals = [];\r\n    for (let i = 0; i * 8 < bytes.length; i++) {\r\n        totals.push(bytes_to_number(bytes.substr(i * 8), 8) * 52);\r\n        console.log(bytes_to_number(bytes.substr(i * 8), 8) * 52);\r\n    }\r\n    return totals;\r\n};\r\n\r\n/**\r\n * Returns a number in the range [0, 1)\r\n * @param {string} bytes - The 8 character (4 byte) hex string to convert to a number\r\n * @returns {number} A number in the range [0, 1)\r\n */\r\nfunction bytes_to_number(bytes) {\r\n    let total = 0;\r\n    for (let i = 0; i < 4; i++) {\r\n        total += parseInt(bytes.substr(i * 2, 2), 16) / Math.pow(256, i + 1);\r\n    }\r\n    return total;\r\n};\r\n\r\nfunction nums_to_card_array(nums) {\r\n    const cards = ['ace_of_spades', '4_of_hearts', '7_of_clubs', '10_of_diamonds',\r\n        '2_of_spades', 'king_of_clubs', '5_of_hearts', '8_of_clubs',\r\n        'jack_of_diamonds', '3_of_spades', '6_of_hearts', 'queen_of_diamonds',\r\n        '9_of_clubs', 'ace_of_hearts', '4_of_clubs', '7_of_diamonds',\r\n        '10_of_spades', '2_of_hearts', 'king_of_diamonds', '5_of_clubs',\r\n        '8_of_diamonds', 'jack_of_spades', '3_of_hearts', '6_of_clubs',\r\n        'queen_of_spades', '9_of_diamonds', 'ace_of_clubs', '4_of_diamonds',\r\n        '7_of_spades', '10_of_hearts', '2_of_clubs', 'king_of_spades', '5_of_diamonds',\r\n        '8_of_spades', 'jack_of_hearts', '3_of_clubs', '6_of_diamonds', 'queen_of_hearts',\r\n        '9_of_spades', 'ace_of_diamonds', '4_of_spades', '7_of_hearts', '10_of_clubs',\r\n        '2_of_diamonds', 'king_of_hearts', '5_of_spades', '8_of_hearts', 'jack_of_clubs',\r\n        '3_of_diamonds', '6_of_spades', 'queen_of_clubs', '9_of_hearts',\r\n\r\n\r\n    ];\r\n    nums = nums.map((num) => {\r\n        return cards[Math.floor(num)];\r\n    });\r\n    return nums;\r\n};\r\n\r\nexport function handleHilo(server_seed, client_seed, nonce, round) {\r\n\r\n    let nums = [];\r\n    for (const [index, value] of bytes_to_num_array(bytes(`${server_seed}:${client_seed}:${nonce}:${round}`)).entries()) {\r\n        nums.push(value);\r\n    }\r\n    nums = nums_to_card_array(nums);\r\n    console.log(\"Hilo : \", nums);\r\n    return nums[0];\r\n}\r\n\r\n\r\n","import React from 'react';\nimport { Form, Media, Button, Alert, Row } from 'react-bootstrap';\nimport { roll } from './Games/dice.js';\nimport { getRoll } from './Games/hashdice.js';\nimport { handlePlinko } from './Games/plinko.js';\nimport { handleLimbo } from './Games/limbo.js';\nimport { handleHilo } from './Games/hilo.js';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      ServerSeed: '',\n      ClientSeed: '',\n      Nonce: 0,\n      result: 0,\n      showResult: false,\n      classicDice: true,\n      hashDice: false,\n      validated: false,\n      plinko: false,\n      limbo: false,\n      hilo: false,\n      round: 0\n    }\n  }\n\n  handleSubmit = (event) => {\n\n    const { ServerSeed, ClientSeed, Nonce, classicDice, hashDice, plinko, limbo, hilo, round } = this.state;\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false || ServerSeed === '' || ClientSeed === '') {\n      event.preventDefault();\n      event.stopPropagation();\n      this.setState({ validated: true })\n    }\n    else\n      this.setState({\n        result: classicDice ? roll(`${ServerSeed}:${ClientSeed}:${Nonce}`)\n          : hashDice ? getRoll(`${ServerSeed}${ClientSeed}${Nonce}`)\n            : plinko ? handlePlinko(ServerSeed, ClientSeed, Nonce)\n              : limbo ? handleLimbo(`${ServerSeed}:${ClientSeed}:${Nonce}`)\n                : hilo ? handleHilo(ServerSeed, ClientSeed, Nonce, round)\n                  : 0,\n        showResult: true,\n        validated: true\n      })\n  }\n\n  render() {\n    const { ServerSeed, ClientSeed, Nonce, result, showResult, classicDice, hashDice, plinko, limbo, hilo, validated } = this.state;\n    return (\n      <div className=\"container pt-5\">\n        <Media>\n          <img\n            width={128}\n            height={128}\n            className=\"mr-3\"\n            src=\"logo192.png\"\n            alt=\"Bc.Game\"\n          />\n          <Media.Body>\n            <br /><br />\n            <h5>Provably Fair Verify Tool (BC.GAME)</h5>\n          </Media.Body>\n        </Media>\n        <Row className=\"mt-3 ml-3\">\n          <Button variant={classicDice ? 'primary' : 'light'} onClick={() => {\n            this.setState({\n              classicDice: true, hashDice: false, plinko: false, limbo: false, hilo: false,\n              showResult: false, ServerSeed: '', ClientSeed: '', Nonce: 0, validated: false\n            })\n          }} >\n            Classic Dice\n            </Button>\n          <Button variant={hashDice ? 'primary' : 'light'} className=\"ml-2\" onClick={() => {\n            this.setState({\n              hashDice: true, classicDice: false, plinko: false, limbo: false, hilo: false,\n              showResult: false, ServerSeed: '', ClientSeed: '', Nonce: 0, validated: false\n            })\n          }} >\n            Hash Dice\n            </Button>\n          <Button variant={plinko ? 'primary' : 'light'} className=\"ml-2\" onClick={() => {\n            this.setState({\n              hashDice: false, classicDice: false, plinko: true, limbo: false, hilo: false,\n              showResult: false, ServerSeed: '', ClientSeed: '', Nonce: 0, validated: false\n            })\n          }} >\n            Plinko\n            </Button>\n          <Button variant={limbo ? 'primary' : 'light'} className=\"ml-2\" onClick={() => {\n            this.setState({\n              hashDice: false, classicDice: false, plinko: false, limbo: true, hilo: false,\n              showResult: false, ServerSeed: '', ClientSeed: '', Nonce: 0, validated: false\n            })\n          }} >\n            Limbo\n            </Button>\n          <Button variant={hilo ? 'primary' : 'light'} className=\"ml-2\" onClick={() => {\n            this.setState({\n              hashDice: false, classicDice: false, plinko: false, limbo: false, hilo: true,\n              showResult: false, ServerSeed: '', ClientSeed: '', Nonce: 0, validated: false\n            })\n          }} >\n            HiLo\n            </Button>\n        </Row>\n        <Form className=\"mt-5 col-md-5\" noValidate validated={validated} >\n          <Form.Group controlId=\"formBasicServerSeed\">\n            <Form.Label>Server Seed</Form.Label>\n            <Form.Control type=\"text\" required placeholder=\"Enter Server Seed\" value={ServerSeed} onChange={(e) => {\n              this.setState({ ServerSeed: e.target.value })\n            }} />\n            <Form.Control.Feedback type=\"invalid\">\n              Please provide a valid Server Seed.\n          </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"formBasicClientSeed\">\n            <Form.Label>Client Seed</Form.Label>\n            <Form.Control type=\"text\" required placeholder=\"Enter Client Seed\" value={ClientSeed} onChange={(e) => {\n              this.setState({ ClientSeed: e.target.value })\n            }} />\n            <Form.Control.Feedback type=\"invalid\">\n              Please provide a valid Client Seed.\n          </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"formBasicNonce\">\n            <Form.Label>Nonce</Form.Label>\n            <Form.Control type=\"number\" required placeholder=\"Nonce\" value={Nonce} onChange={(e) => {\n              this.setState({ Nonce: e.target.value })\n            }} />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"button\" onClick={this.handleSubmit}>\n            Submit\n        </Button>\n          {showResult && validated && <Alert className=\"mt-3\" variant=\"success\">\n            The result is : {result} !\n        </Alert>\n          }\n        </Form>\n\n        {result ? <img src='8_of_diamonds.png' alt={result} /> : ''}\n\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}